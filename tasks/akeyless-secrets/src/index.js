const SDK = require('azure-pipelines-task-lib/task');
const akeyless = require('akeyless');

async function run() {
  // *********************************************** //
  // **** Phase 1 - Get inputs and validate ******** //
  // *********************************************** //

  const accessId = SDK.getInput('accessId', true);
  const azureJwt = SDK.getInput('azureJwt', true);
  const staticSecrets = SDK.getInput('staticSecrets');
  const dynamicSecrets = SDK.getInput('dynamicSecrets');

  console.log(`Validating inputs...`);

  if (accessId === undefined) {
    throw new Error('You must provide the access id for your auth method via the accessId input');
  }

  if (azureJwt === undefined) {
    throw new Error('You must provide a JWT token for Azure authentication, this is generated by a Service connection and Azure CLI.');
  }

  // *********************************************** //
  // **** Phase 2 - Get akeyless authentication **** //
  // *********************************************** //

  const apiUrl = 'https://api.akeyless.io';
  const api = akeylessApi.api(apiUrl);

  let akeylessToken = undefined;

  try {
    console.log(`Authenticating with akeyless...`);

    api
      .auth(
        akeyless.Auth.constructFromObject({
          'access-type': 'jwt',
          'access-id': accessId,
          jwt: azureJwt
        })
      )
      .then(data => {
        akeylessToken = data.token;
      });

    console.log(`Granted an akeyless token!`);
  } catch (error) {
    SDK.setResult(SDK.TaskResult.Failed, `Failed to authenticate with Akeyless, please verify you have set up your Auth Method and/or Access Role properly. \r\nError: ${error}.`);
    return;
  }

  if (akeylessToken === undefined) {
    SDK.setResult(
      SDK.TaskResult.Failed,
      `AKeyless token is empty, cannot continue. If you are successfully authenticating, but are not getting a token from akeyless, please open an issue here https://github.com/LanceMcCarthy/akeyless-extension-azdo.`
    );
  }

  // *********************************************** //
  // ***** Phase 3 - Fetch akeyless secrets ******** //
  // *********************************************** //

  // ************ static secrets *************** //

  if (staticSecrets) {
    console.log(`[Static Secrets] Fetching static secrets...`);

    const staticSecretsDictionary = JSON.parse(staticSecrets);

    if (staticSecretsDictionary === undefined) {
      SDK.setResult(
        SDK.TaskResult.Failed,
        `Something went wrong during input deserialization of staticSecrets. Check the JSON string is in the expected format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`
      );
    }

    // GET SECRETS
    for (const akeylessPath of Object.keys(staticSecretsDictionary)) {
      // Get the name to be used for the output variable
      let variableName = staticSecretsDictionary[akeylessPath];

      // Let the user know we are attempting to get (this helps significantly when troubleshooting a problem).
      console.log(`Requesting '${akeylessPath}' from akeyless...`);

      // Fetch the secret
      api
        .getSecretValue(
          akeyless.GetSecretValue.constructFromObject({
            token: akeylessToken,
            names: [akeylessPath]
          })
        )
        .then(secretResult => {
          success(variableName, secretResult[akeylessPath]);
        })
        .catch(error => {
          fail(akeylessPath, JSON.stringify(error));
        });
    }
  } else {
    console.log(`[Static Secrets] Skipping static secrets step because no static secrets were requested.`);
  }

  // ********** dynamic secrets *************** //

  if (dynamicSecrets) {
    console.log(`[Dynamic Secrets] Fetching dynamic secrets...`);

    let secretsDictionary = (secretsDictionary = JSON.parse(dynamicSecrets));

    if (secretsDictionary === undefined) {
      SDK.setResult(
        SDK.TaskResult.Failed,
        `Something went wrong during input deserialization of dynamicSecrets. Check the JSON string is in the expected format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`
      );
    }

    for (const akeylessPath of Object.keys(secretsDictionary)) {
      // Get user's desired name for the variable
      let variableName = secretsDictionary[akeylessPath];

      // Let the user know we are attempting to get (this helps significantly when troubleshooting a problem).
      console.log(`Requesting '${akeylessPath}' from akeyless...`);

      // Fetch the secret
      api
        .getSecretValue(
          akeyless.GetSecretValue.constructFromObject({
            token: akeylessToken,
            names: [akeylessPath]
          })
        )
        .then(secretResult => {
          success(variableName, secretResult[akeylessPath]);
        })
        .catch(error => {
          fail(akeylessPath, JSON.stringify(error));
        });
    }
  } else {
    console.log(`[Dynamic Secrets] Skipping dynamic secrets step because no dynamic secrets were requested.`);
  }
}

function success(name, value) {
  SDK.setVariable(name, value, true, true);

  console.log(
    `âœ… Success! '${akeylessPath}' was fetched, the value will be available in the '${variableName}' output variable. !!! IMPORTANT !!! Make sure you have set the 'Output Variables > Reference Name' for your task or you will not be able to reference the output variable in subsequent tasks.`
  );
}

function fail(name, errorText) {
  // Fail if there was troubvle getting any expected secret
  SDK.setResult(SDK.TaskResult.Failed, `Could not fetch '${name}'. Error: ${errorText}.`);
}

exports.run = run;

if (require.main === module) {
  try {
    SDK.debug('Starting main run');
    run();
  } catch (e) {
    SDK.debug(e.stack);
    SDK.error(e.message);
    SDK.setResult(SDK.TaskResult.Failed, e.message);
  }
}
